@using Manufaktura.Controls.Model
@using Manufaktura.Music.Model
@using Manufaktura.Music.Model.MajorAndMinor
@using Manufaktura.Controls.Linq;
@using Manufaktura.RismCatalogue.Shared.ViewModels;

@page "/"

<NoteViewer Score=@score CurrentRhythmicDuration=@CurrentRhythmicDuration />
<Keyboard StartingMidiPitch="55" NumberOfKeys="39" WhiteKeyClass="btn-key btn-key-large" BlackKeyClass="btn-key btn-key-small" KeyGapClass="btn-key-none"
          RhythmicDurationChanged="@(d => { CurrentRhythmicDuration = d; StateHasChanged(); })"
          CurrentRhythmicDuration=@CurrentRhythmicDuration
          NumberOfKeys=@NumberOfKeys
          AddRest="@AddRest"
          RemoveSymbol="@RemoveLastSymbol" />
<div>
    <div>
        <label><input type="checkbox" />Include intervals</label>
    </div>
    <div>
        <label><input type="checkbox" />Include rhythm</label>
    </div>
    <div>
        <button class="btn btn-primary" onclick="@Search">Search</button>
    </div>
</div>


@functions {

    [Parameter]
    RhythmicDuration CurrentRhythmicDuration { get; set; } = RhythmicDuration.Quarter;

    [Parameter]
    int NumberOfKeys { get; set; } = 20;

    public void Search ()
    {
        var intervals = score.ToIntervals();
        JSRuntime.Current.InvokeAsync<object>("startNewSearch", new SearchQuery { Intervals = intervals });
    }

    public void AddRest(RhythmicDuration duration)
    {
        score.FirstStaff.Add(new Rest(duration));
        StateHasChanged();
    }

    public void RemoveLastSymbol()
    {
        var lastSymbol = score.FirstStaff.Elements.LastOrDefault(e => !(e is Key) && !(e is Clef) && !(e is TimeSignature));
        if (lastSymbol != null)
        {
            score.FirstStaff.Elements.Remove(lastSymbol);
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void OnWindowResize(double size)
    {
        var numberOfKeys = DetermineNumberOfKeys(size);
        if (numberOfKeys != NumberOfKeys)
        {
            NumberOfKeys = numberOfKeys < 4 ? 3 : numberOfKeys;
            StateHasChanged();
        }
    }

    private int DetermineNumberOfKeys(double size)
    {
        return (int)(size / 12);
    }


    protected override async Task OnAfterRenderAsync()
    {
        await JSRuntime.Current.InvokeAsync<object>("registerKeyboard", new DotNetObjectRef(this));
    }

    Score score = Score.CreateOneStaffScore(Clef.Treble, MajorScale.C);

}