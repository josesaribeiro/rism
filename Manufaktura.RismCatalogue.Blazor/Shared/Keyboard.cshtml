@using Manufaktura.Music.Extensions
@using Manufaktura.Music.Model
@using Manufaktura.Controls.Model.Fonts
@using System.Text

<div>
    @((MarkupString)RenderKeyboard())
</div>
<div class="row">

    <div class="col-lg-12 col-md-12 nomargin-right">
        <a class="btn btn-default btn-note @(CurrentRhythmicDuration == RhythmicDuration.Whole ? "note-selected" : "")" note="@musicFont.NoteWhole" onclick=@(() => RhythmicDurationChanged?.Invoke(RhythmicDuration.Whole))><span class="note">w</span></a>
        <a class="btn btn-default btn-note @(CurrentRhythmicDuration == RhythmicDuration.Half ? "note-selected" : "")" note="@musicFont.NoteHalf" onclick=@(() => RhythmicDurationChanged?.Invoke(RhythmicDuration.Half))><span class="note">h</span></a>
        <a class="btn btn-default btn-note @(CurrentRhythmicDuration == RhythmicDuration.Quarter ? "note-selected" : "")" note="@musicFont.NoteQuarter" onclick=@(() => RhythmicDurationChanged?.Invoke(RhythmicDuration.Quarter))><span class="note">q</span></a>
        <a class="btn btn-default btn-note @(CurrentRhythmicDuration == RhythmicDuration.Eighth ? "note-selected" : "")" note="@musicFont.NoteEighth" onclick=@(() => RhythmicDurationChanged?.Invoke(RhythmicDuration.Eighth))><span class="note">e</span></a>
        <a class="btn btn-default btn-note @(CurrentRhythmicDuration == RhythmicDuration.Sixteenth ? "note-selected" : "")" note="@musicFont.NoteSixteenth" onclick=@(() => RhythmicDurationChanged?.Invoke(RhythmicDuration.Sixteenth))><span class="note">s</span></a>
        <a class="btn btn-default btn-note @(CurrentRhythmicDuration == RhythmicDuration.D32nd ? "note-selected" : "")" note="@musicFont.NoteSixteenth" onclick=@(() => RhythmicDurationChanged?.Invoke(RhythmicDuration.D32nd))><span class="note">s</span></a>
        <a class="btn btn-default btn-note" note="|" onclick=@(() => AddBarline?.Invoke())><span class="note">|</span></a>
        <a class="btn btn-default btn-note" note="." onclick=@(() => AddDot?.Invoke())><span class="note">.</span></a>
    </div>
    <div class="col-lg-12 col-md-12 nomargin-left">
        <a class="btn btn-default btn-note" note="W" onclick=@(() => AddRest?.Invoke(RhythmicDuration.Whole))><span class="note">@musicFont.RestWhole</span></a>
        <a class="btn btn-default btn-note" note="H" onclick=@(() => AddRest?.Invoke(RhythmicDuration.Half))><span class="note">@musicFont.RestHalf</span></a>
        <a class="btn btn-default btn-note" note="Q" onclick=@(() => AddRest?.Invoke(RhythmicDuration.Quarter))><span class="note">@musicFont.RestQuarter</span></a>
        <a class="btn btn-default btn-note" note="E" onclick=@(() => AddRest?.Invoke(RhythmicDuration.Eighth))><span class="note">@musicFont.RestEighth</span></a>
        <a class="btn btn-default btn-note" note="S" onclick=@(() => AddRest?.Invoke(RhythmicDuration.Sixteenth))><span class="note">@musicFont.RestSixteenth</span></a>
        <a class="btn btn-default btn-note" note="S" onclick=@(() => AddRest?.Invoke(RhythmicDuration.D32nd))><span class="note">@musicFont.Rest32nd</span></a>
        <a class="btn btn-default btn-remove" onclick=@(() => RemoveSymbol?.Invoke())>Delete</a>
    </div>
</div>

@functions {

    [Parameter]
    Action<RhythmicDuration> RhythmicDurationChanged { get; set; }

    [Parameter]
    RhythmicDuration CurrentRhythmicDuration { get; set; }

    [Parameter]
    Action<RhythmicDuration> AddRest { get; set; }

    [Parameter]
    Action AddBarline { get; set; }

    [Parameter]
    Action AddDot { get; set; }

    [Parameter]
    Action RemoveSymbol { get; set; }

    [Parameter]
    int NumberOfKeys { get; set; }

    [Parameter]
    int StartingMidiPitch { get; set; }

    [Parameter]
    string BlackKeyClass { get; set; }

    [Parameter]
    string WhiteKeyClass { get; set; }

    [Parameter]
    string KeyGapClass { get; set; }

    IMusicFont musicFont = new PolihymniaFont();

    public string RenderKeyboard()
    {
        if (NumberOfKeys <= 0) throw new ArgumentException("Number of keys must be grater than 0.", nameof(NumberOfKeys));

        var whiteKeys = new List<int>();
        var blackKeys = new List<int>();
        for (var midiPitch = StartingMidiPitch; midiPitch < StartingMidiPitch + NumberOfKeys; midiPitch++)
        {
            var pitch = Pitch.FromMidiPitch(midiPitch, Pitch.MidiPitchTranslationMode.Auto);
            if (pitch.Alter == 0) whiteKeys.Add(midiPitch);
            else blackKeys.Add(midiPitch);

            if (pitch.ToStep() == Step.E || pitch.ToStep() == Step.B) blackKeys.Add(-1);
        }

        var whiteKeyWidth = Math.Round(100d / whiteKeys.Count, 2);
        var blackKeyWidth = Math.Round(whiteKeyWidth / 2, 2);
        var blackKeyShift = Math.Round(whiteKeyWidth - blackKeyWidth / 2);

        var sb = new StringBuilder("<div style=\"overflow: hidden; white-space:nowrap; position: relative; height: 78px; width: 100%;\">");
        sb.Append($"<div style=\"overflow: hidden; white-space:nowrap; width: 100%; position:absolute; left:{blackKeyShift.ToStringInvariant()}%;\">");
        foreach (var blackKey in blackKeys)
        {
            if (blackKey == -1) sb.Append($"<span class=\"{KeyGapClass}\" style=\"width: {blackKeyWidth.ToStringInvariant()}%; margin-right: {blackKeyWidth.ToStringInvariant()}%\"></span>");
            else sb.Append($"<a class=\"{BlackKeyClass}\" midiPitch=\"{blackKey}\" style=\"width: {blackKeyWidth.ToStringInvariant()}%; margin-right: {blackKeyWidth.ToStringInvariant()}%\"></a>");
        }
        sb.Append("</div>");

        foreach (var whiteKey in whiteKeys)
        {
            sb.Append($"<a class=\"{WhiteKeyClass}\" midiPitch=\"{whiteKey}\" style=\"width: {whiteKeyWidth.ToStringInvariant()}%\"></a>");
        }
        sb.Append("</div>");

        return sb.ToString();
    }
}